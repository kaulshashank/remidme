const http = require("http");

const store = require("./store.js");

const { isUID } = require("../cli/parser.js");

const validateNotificationObject = (notificationObject) => {
	if (typeof notificationObject === "undefined"
		|| Object.keys(notificationObject).length === 0) {
		return false;
	}
	if (notificationObject.type
		&& typeof notificationObject.type !== "string") {
		return false;
	}
	if (notificationObject.task
		&& typeof notificationObject.task !== "string") {
		return false;
	}
	if (notificationObject.time
		&& (typeof notificationObject.time !== "number"
			&& typeof notificationObject.time !== "string")) {
		return false;
	}

	return true;
}

const onError = (req, res) => (err) => {
	console.log("[SERVER] An error occured");
	console.log(err);
	res.statusCode = 500;
	res.end();
}

/**
 * 
 * @param {*} req HTTP request object
 * @param {*} res HTTP response object
 * 
 * =========================== END POINTS =============================
 * 
 * GET /reminder
 * Response status codes
 * 		If succesful: 200
 * 		If incorrect request from client: 400
 * 		If an error occured on the server: 500
 * Response body 
 * 		If succesful: should return the store
 * 		If inccorect request from the client: { message: "Incorrect input" }
 * 		If an error occured on the server: { error: <Error object> }
 * 
 * 
 * POST /reminder
 * Response status codes
 * 		If succesful: 200
 * 		If incorrect request from client: 400
 * 		If an error occured on the server: 500
 * Response body
 * 		If succesful: should contain a JSON object of the form, { "taskId": "Some task identifier generated by the server" }
 * 		If incorrect request from client: { message: "Incorrect input" }
 * 		If an error occured on the server: { error: <Error object> }
 * 
 * 
 * DELETE /reminder: 
 * Response status codes
 * 		If succesfull: 200
 * 		If incorrect request from client: 400
 * 		If an error occured on the server: 500
 * Response body 
 * 		If succesful: should be an empty object, {}
 * 		If incorrect request from client: { message: "Incorrect input" }
 * 		If an error occured on the server: { error: <Error object> }
 * 
 * 
 * ANY OTHER *:
 * Response status code: 404
 * Response body: { "message": "Not Found." }
 * 
 * ====================================================================
 */
const onRequest = (req, res) => {

	req.on("error", onError(req, res)); // Curry 'cuz I can ¯\_(ツ)_/¯

	const { method, url } = req;

	try {
		if (url.includes("/reminder")) { // Using include as url might include query string
			if (method === "GET") {
				/**
			 	 * Return the store
			 	 */
				try {
					const response = { reminders: store.readFromStore() };
					res.statusCode = 200;
					res.setHeader('Content-Type', 'application/json');
					res.write(JSON.stringify(response));
					res.end();
				} catch (err) {
					res.statusCode = 500;
					res.write(`Internal Server Error: ${err}`);
					res.end();
				}
			} else if (method === "POST") {
				/**
				 * Validate request and then
				 * write the new reminder to the
				 * store
				 */
				try {
					let requestBody = [];
					req
						.on("data", chunk => {
							requestBody.push(chunk);
						})
						.on("end", () => {
							try {
								requestBody = JSON.parse(Buffer.concat(requestBody).toString());
								if (validateNotificationObject(requestBody)) {
									store.writeToStore(requestBody)
										.then(taskId => {
											res.setHeader('Content-Type', 'application/json');
											res.statusCode = 200;
											res.write(JSON.stringify({ taskId }));
											res.end();
										});
								} else {
									res.statusCode = 400;
									res.write("Invalid Request");
									res.end();
								}
							} catch (err) {
								res.statusCode = 500;
								res.write(`Internal Server Error: ${err}`);
								res.end();
							}
						});
				} catch (err) {
					res.statusCode = 500;
					res.write(`Internal Server Error: ${err}`);
					res.end();
				}
			} else if (method === "DELETE") {
				/**
				 * Validate request and then
				 * delete or issue for delete
				 * accordingly.
				 */
				try {
					const query = url.split("?")[1];
					const taskId = query.split("=")[1];
					if (isUID(taskId)) {
						const currentStore = store.readFromStore();
						if (currentStore[taskId] && currentStore[taskId].type === "timeout") {
							return store.deleteFromStore(taskId)
								.then(() => {
									res.setHeader("Content-Type", "application/json");
									res.statusCode = 200;
									res.end();
								});
						} else if (currentStore[taskId] && currentStore[taskId].type === "interval") {
							return store.issueForDelete(taskId)
								.then(() => {
									res.setHeader("Content-Type", "application/json");
									res.statusCode = 200;
									res.end();
								});
						}
					}
					res.statusCode = 400;
					res.write("Invalid Request");
					res.end();
					return;
				} catch (err) {
					res.statusCode = 500;
					res.write(`Internal Server Error: ${err}`);
					res.end();
				}
			}
		} else {
			res.statusCode = 404;
			res.setHeader("Content-Type", "application/json");
			res.write(JSON.stringify({ "message": "Not Found." }));
			res.end();
		}
	} catch (err) {
		res.statusCode = 500;
		res.write(`Internal Server Error: ${err}`);
		res.end();
	}
}

/**
 * Runs a simple HTTP server
 * @description Starts an HTTP server on port 80.
 * 
 * Returns a Promise whose resolution value is the
 * httpServer object.
 */
const run = () => {
	return new Promise((resolve, reject) => {
		try {
			const server = http.createServer();

			server.on("request", onRequest);

			server.listen(process.env.PORT || 3000, () => {
				resolve(server);
			});
		} catch (err) {
			reject(err);
		}
	})
}

module.exports = run;